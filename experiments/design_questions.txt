=== Design and Implementation Plan Questions ===

Below are a few questions about how you will design your program and your
implementation plan. It is crucial to have a reasonable design and
implementation plan before you start your program. Without this, success is
unlikely. The following questions will help guide you in your thinking and
raise some important questions and issues. There is no single "right" answer
to each of the questions but there are some "wrong" answers. Some designs and
plans are better than others. The point here is for you to think about what
you're going to do.

Make a copy of this file and edit it, adding your answers then turn this
document in.

----------------------------------------------------------------------

1) What parts of the this program make it so that a tree structure is
required? That is, why not just store everything in a linked list or hash
table?

The scientists probably want to know each plant's lineage, so the tree structure just makes the most sense.

2) Why should the plant class NOT have pointers to other plant clasess?

The data structuring should be handled by the tree class not the data object.

3) Why should the treenode class NOT have pointers to the parent node?

You should always be traversing the tree "downward," there is no reason to be starting at a random node and finding your way back up to the root.

4) This assignment doesn't require the ability to remove nodes from the tree
(except from the destructor). What would be the problem with allowing a node
in the middle of the tree to be removed?

In this scenario the tree represents an evolutionary tree, not a sorted tree of arbitrary data. Deleting an ancestor would disrupt the space-time continuum in unusual ways (sources: Back to the Future, Doctor Who)

5) This program requires that each node in the tree has exactly 2
children. What would be a way to allow each node to have 1 or more children
(no limit)? What would be the challenges with that?

Instead of each node having a fixed number of pointers to its children, it could have something like a linked list of pointers to its children. Nodes within nodes could be pretty confusing.




