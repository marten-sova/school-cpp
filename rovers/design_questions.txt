=== Design and Implementation Plan Questions ===

Below are a few questions about how you will design your program and your
implementation plan. It is crucial to have a reasonable design and
implementation plan before you start your program. Without this, success is
unlikely. The following questions will help guide you in your thinking and
raise some important questions and issues. There is no single "right" answer
to each of the questions but there are some "wrong" answers. Some designs and
plans are better than others. The point here is for you to think about what
you're going to do.

Make a copy of this file and edit it, adding your answers then turn this
document in.

----------------------------------------------------------------------

1) What classes to you intend to create? List each of the classes and provide
a brief description of the role of that class. This list is not set in
stone. As you implement your program, if you find that you need additional
classes that are not in this list, or that something you listed here doesn't
really fit, that's ok. The point is to start thinking about the high-level
structure of your program.

rover
stack
queue
resultdata



2) What class do you plan to implement first? Why?

Most likely the Stack class, because I've never implemented a stack structure before so I want to get it working on a basic level first.

3) Will the copy constructor for the rover create a deep or shallow copy of
the queue? Why?

Arrays are basically pointers so I think you would have to do a deep copy, otherwise it would just be pointing to the same array.

4) What type of data will be stored in the queue? What type of data will be
stored in the stack?

Queue: scan data. This is an int and I think also the corresponding x,y ints.
Stack: rover location x,y (pair of integers)

5) Do you plan to have any private helper methods in your rover class?

Not at this time.

6) How will you make sure that the queue doesn't crawl off the end of the
array?

It's a circular array so isn't that not a concern? Or does this question refer to overwriting entries once the entire circular array is full? In which case I guess you could just keep a count of the total number of entries and refuse to insert new ones when its full.

7) What is your testing strategy? Will you use the testqueue and teststack programs?

Most likely yes, I want to focus on figuring out the stack and queue functionality first.

8) What is your strategy for finding and addressing memory leaks? Will you get
the whole program working first and then address memory leaks or will you
check on memory leaks as you go?

I will get the basic structure of the program working first, then check for memory problems.




